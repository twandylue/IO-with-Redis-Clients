@page "/plots"

<PageTitle>Show plots about the system.</PageTitle>

@using Plotly.Blazor.Traces.ScatterLib
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using RedisClientsWatcher.Data
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.YAxisLib

<h3>Plots</h3>

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @bind-Legend="legend" @ref="chart" />

@code {
    PlotlyChart chart;

    Legend legend = new Legend()
    {
        Font = new Plotly.Blazor.LayoutLib.LegendLib.Font()
        {
            Size = 12
        },
        BorderWidth = new decimal(15.5),
    };
    Config config = new Config()
    {
        Responsive = true,
    };
    Layout layout = new Layout()
    {
        Height = 500,
        XAxis = new[]
        {
            new XAxis
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title()
                {
                    Text = "Time(seconds)"
                },
            },
        },
        YAxis = new List<YAxis>()
        {
            new YAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title()
                {
                    Text = "Number"
                },
                AutoRange = AutoRangeEnum.True,
                // Range = new object?[] { 0, null }, 
            },
            new YAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title()
                {
                    Text = "Requests(Number)",
                },
                Overlaying = "y",
                AutoRange = AutoRangeEnum.True,
                // Range = new object?[] { 0, null }, 
                Side = SideEnum.Right,
            }
        }
    };
    
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = HandleData(
        threadPoolLogFilePath: "./logs/ThreadPool/ThreadPool-20230327.jsonl",
        dataControllerLogFilePath: "./logs/DataController/DataController-20230327.jsonl"
        );

    private static IList<ITrace> HandleData(string threadPoolLogFilePath, string dataControllerLogFilePath)
    {
        var threadPoolLog = PlotService.ParseThreadPoolLog(threadPoolLogFilePath);
        var dataControllerExceptionLog = PlotService.ParseDataControllerExceptionLog(dataControllerLogFilePath);
        var dataControllerLogEntry = PlotService.ParseDataControllerLog(dataControllerLogFilePath, "Entry");
        var countEntry = 0;
        var dataControllerLogExit = PlotService.ParseDataControllerLog(dataControllerLogFilePath, "Exit");
        var countExit = 0;
        
        var startTime = DateTimeOffset.Parse(threadPoolLog[0].Time);
        
        return new List<ITrace>
        {
            new Scatter
            {
                Name = "Busy Worker Threads",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = threadPoolLog.Select(d => d.BusyWorkerThreads as object).ToList(), 
                X = threadPoolLog.Select(d =>
                {
                    var timeSpan = DateTimeOffset.Parse(d.Time) - startTime;
                    return timeSpan.Seconds as object;
                }).ToList()
            },
            new Scatter
            {
                Name = "Busy IO Threads",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = threadPoolLog.Select(d => d.BusyIoThreads as object).ToList(), 
                X = threadPoolLog.Select(d =>
                {
                    var timeSpan = DateTime.Parse(d.Time) - startTime;
                    return timeSpan as object;
                }).ToList()
            },
            new Scatter
            {
                Name = "DataController-Entry",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = dataControllerLogEntry.Select(_ =>
                {
                    countEntry += 1;
                    return countEntry as object;
                }).ToList(), 
                YAxis = "y2",
                X = dataControllerLogEntry.Select(d =>
                {
                    var timeSpan = DateTime.Parse(d.Time) - startTime;
                    return timeSpan.Seconds as object;
                }).ToList()
            },
            new Scatter
            {
                Name = "DataController-Exit",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = dataControllerLogExit.Select(_ =>
                {
                    countExit += 1;
                    return countExit as object;
                }).ToList(), 
                YAxis = "y2",
                X = dataControllerLogExit.Select(d =>
                {
                    var timeSpan = DateTime.Parse(d.Time) - startTime;
                    return timeSpan.Seconds as object;
                }).ToList()
            },
            new Bar
            {
                Name = "Data Controller Exceptions",
                Y = dataControllerExceptionLog.Select(d => d.Count as object).ToList(),
                X = dataControllerExceptionLog.Select(d =>
                {
                    var timeSpan = DateTimeOffset.Parse(d.Time) - startTime;
                    return timeSpan.Seconds as object;
                }).ToList(),
                Marker = new Plotly.Blazor.Traces.BarLib.Marker()
                {
                    Color = "red"
                },
                Width = (decimal?)0.5,
                Opacity = new decimal(0.7)
            }
        };
    }
}