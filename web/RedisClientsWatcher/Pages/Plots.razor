@page "/plots"

<PageTitle>Show plots about the system.</PageTitle>

@using Plotly.Blazor.Traces.ScatterLib
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using RedisClientsWatcher.Data
@using Plotly.Blazor.LayoutLib

<h3>Plots</h3>

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"/>

@code {
    PlotlyChart chart;
    Config config = new Config();
    Layout layout = new Layout()
    {
        XAxis = new[]
        {
            new XAxis
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title()
                {
                    Text = "Time(hh:mm:ss)"
                },
            },
        },
        YAxis = new[]
        {
            new YAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title()
                {
                    Text = "Number"
                },
            }
        }
    };
    
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = HandleData("./logs/ThreadPool/ThreadPool-2023032700.jsonl");

    private static IList<ITrace> HandleData(string fileName)
    {
        var data = PlotService.ParseLog(fileName);
        var startTime = DateTime.Parse(data[0].Time);
        
        return new List<ITrace>
        {
            new Scatter
            {
                Name = "Busy Worker Threads",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = data.Select(d => d.BusyWorkerThreads as object).ToList(), 
                X = data.Select(d =>
                {
                    var timeSpan = DateTime.Parse(d.Time) - startTime;
                    return timeSpan as object;
                }).ToList()
            },
            // new Scatter
            // {
            //     Name = "Max Worker Threads",
            //     Mode = ModeFlag.Lines | ModeFlag.Markers,
            //     Y = data.Select(d => d.MaxWorkerThreads as object).ToList(), 
            //     X = data.Select(d =>
            //     {
            //         var timeSpan = DateTime.Parse(d.Time) - startTime;
            //         return timeSpan as object;
            //     }).ToList()
            // },
            new Scatter
            {
                Name = "Busy IO Threads",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                Y = data.Select(d => d.BusyIoThreads as object).ToList(), 
                X = data.Select(d =>
                {
                    var timeSpan = DateTime.Parse(d.Time) - startTime;
                    return timeSpan as object;
                }).ToList()
            }
        };
    }
}